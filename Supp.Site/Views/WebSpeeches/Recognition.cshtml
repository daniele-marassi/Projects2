@model Supp.Models.WebSpeechDto

@using Supp.Site.Controllers;
@using Supp.Site.Common;

@{
    ViewData["Title"] = "Box";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Recognition", "WebSpeeches", FormMethod.Get))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
        //@*101*@
        var final_transcript = "";
        var recognizing = false;
        var ignore_onend = true;
        var recognition = null;
        var _phrase = null;
        var listeningPhrase = "";
        var recognitionActive = true;
        var speech = null;
        var serviceInterval = null;
        var hosts = [];
        var _reset = false;
        var hosts_cmb_string ="";
        var two_line = /\n\n/g;
        var one_line = /\n/g;
        var first_char = /\S/;
        var fakeClickMilliseconds = 0;
        var url = null;
        var partialResetActive = false;
        var resetActive = false;
        var countTheTimesToPartialReset = 0;
        var countTheTimeToResetInSeconds = 0;
        var countTheTimeToResetInterim_spanInSeconds = 0;
        var audioActive = true;
        var shortcuts;
        var shortcutGroups;
        var synth = null;
        var readOutLoudActive = false;
        var firstLoad = true;
        var initFinalTimeoutStep1 = null;
        var initFinalTimeoutStep2 = null;
        var actionShortcutTimeout = null;
        var sessionGuid = null;
        var voices;
        var phraseSended=false;
        var shortcutsOpen = false;
        var ehiRecognitedAudio = null;
        var timers = null;
        var lastIndex = 0;
        var newParameters = "";
        var identification = null;
        var webSpeeches = null;
        var _keysMatched = null;
        var initSpeechExecuted = false;
        var readingMessage = false;
        var cleaningMessage = false;
        var consoleLog = [];
        var consoleWarn = [];
        var boxAnimatedInlistening = null;

        //@*Model Variables*@
        var name = "";
        var answer = "";
        var startAnswer = "";
        var finalStep = false;
        var hostsArrayString = "";
        var _error = "";
        var application = false;
        var alwaysShow = false;
        var resetAfterLoad = false;
        var recognitionDisable = false;
        var onlyRefresh = false;
        var culture = "";
        var id = "";
        var hostSelected = "";
        var phrase = "";
        var listeningWord1 = "";
        var listeningWord2 = "";
        var executionQueueId = "";
        var shortcutsInJson = "";
        var shortcutGroupsInJson = "";
        var type = "";
        var parameters = ""; 
        var ehi = 0;
        var timeToResetInSeconds = 0;
        var timeToEhiTimeoutInSeconds = 0;
        var subType = ""; 
        var step = 0;
        var newWebSpeechRequestName= "";
        var logJSActive = true;
        var identificationInJson = null;
        var webSpeechesInJson = null;
        var userId = -1;
        var message = "";
        var messagingActive = false;
        var nicknamesInJson = null;
        var sslCertificateExpirationDate = null;
        //@*Model Variables*@

        function VariablesAssignmentFromJson(jsonString) {
            LogFunctionStart();
            //console.warn("###" + jsonString + "###");
            var model = JSON.parse(jsonString);

            name = DecodeUnicodeExtended(model["Name"]);

            var _sslCertificateExpirationDate = DecodeUnicodeExtended(model["SslCertificateExpirationDate"]);
            if (_sslCertificateExpirationDate != null && _sslCertificateExpirationDate != "null" && _sslCertificateExpirationDate != "")
                sslCertificateExpirationDate = _sslCertificateExpirationDate;

            answer = DecodeUnicodeExtended(model["Answer"]);
            message = DecodeUnicodeExtended(model["Message"]);
            startAnswer = DecodeUnicodeExtended(model["StartAnswer"]);
            finalStep = GetBoolean(DecodeUnicodeExtended(model["FinalStep"]));
            hostsArrayString = DecodeUnicodeExtended(model["HostsArray"]);
            nicknamesInJson = DecodeUnicodeExtended(model["NicknamesInJson"]);
            _error = DecodeUnicodeExtended(model["Error"]);
            application = GetBoolean(DecodeUnicodeExtended(model["Application"]));
            alwaysShow = GetBoolean(DecodeUnicodeExtended(model["AlwaysShow"]));
            resetAfterLoad = GetBoolean(DecodeUnicodeExtended(model["ResetAfterLoad"]));
            recognitionDisable = GetBoolean(DecodeUnicodeExtended(model["RecognitionDisable"]));
            messagingActive = GetBoolean(DecodeUnicodeExtended(model["MessagingActive"]));
            onlyRefresh = GetBoolean(DecodeUnicodeExtended(model["OnlyRefresh"]));
            culture = DecodeUnicodeExtended(model["Culture"]);
            id = DecodeUnicodeExtended( model["Id"]);
            hostSelected =DecodeUnicodeExtended( model["HostSelected"]);
            phrase = DecodeUnicodeExtended(model["Phrase"]);
            logJSActive = GetBoolean(DecodeUnicodeExtended(model["LogJSActive"]));

            if(finalStep == false) {
                if(phrase != null && phrase != ""){           

                }
            }
            else{
                stepType = "";
                step = 0;
                subType = "";
                id = 0;
            }

            listeningWord1 = DecodeUnicodeExtended(model["ListeningWord1"]).trim().toLowerCase();
            listeningWord2 = DecodeUnicodeExtended(model["ListeningWord2"]).trim().toLowerCase();

            listeningPhrase = listeningWord1;
            if(listeningPhrase != "") listeningPhrase += " ";
            listeningPhrase += listeningWord2;

            executionQueueId = DecodeUnicodeExtended(model["ExecutionQueueId"]);
            shortcutsInJson = DecodeUnicodeExtended(model["ShortcutsInJson"]);
            shortcutGroupsInJson = DecodeUnicodeExtended(model["ShortcutGroupsInJson"]);

            identificationInJson = DecodeUnicodeExtended(model["IdentificationInJson"]);
            userId = DecodeUnicodeExtended(model["UserId"]);
            webSpeechesInJson = DecodeUnicodeExtended(model["WebSpeechesInJson"]);

            newWebSpeechRequestName = DecodeUnicode(model["NewWebSpeechRequestName"]);
            
            type = DecodeUnicodeExtended(model["Type"]);
            parameters = DecodeUnicodeExtended(model["Parameters"]); 
            ehi = 0;
            try {
                ehi=parseInt(DecodeUnicodeExtended(model["Ehi"]));
            }
            catch (error) {}
            timeToResetInSeconds = 0;
            try {
                timeToResetInSeconds=parseInt(DecodeUnicodeExtended(model["TimeToResetInSeconds"]));
            }
            catch (error) {}
            timeToEhiTimeoutInSeconds = 0;
            try {
                timeToEhiTimeoutInSeconds=parseInt(DecodeUnicodeExtended(model["TimeToEhiTimeoutInSeconds"]));
            }
            catch (error) {}
            subType = DecodeUnicodeExtended(model["SubType"]);
            step = -1;
            try {
                step=parseInt(DecodeUnicodeExtended(model["Step"]));
            }
            catch (error) {}

            //application = true; //to debug

            LogFunctionEnd();
        }

        function VariablesAssignmentFromModel() {
            LogFunctionStart();
            name = "@Model?.Name";
            var _sslCertificateExpirationDate = "@Model?.SslCertificateExpirationDate";
            if (_sslCertificateExpirationDate != null && _sslCertificateExpirationDate != "null" && _sslCertificateExpirationDate != "")
                sslCertificateExpirationDate = _sslCertificateExpirationDate;

            answer = "@Model?.Answer";
            message = "@Model?.Message";
            startAnswer = "@Model?.StartAnswer";
            finalStep = GetBoolean("@Model?.FinalStep");
            hostsArrayString = "@Model?.HostsArray";
            nicknamesInJson = "@Model?.NicknamesInJson";
            _error = "@Model?.Error";
            application = GetBoolean("@Model?.Application");
            alwaysShow = GetBoolean("@Model?.AlwaysShow");
            resetAfterLoad = GetBoolean("@Model?.ResetAfterLoad");
            recognitionDisable = GetBoolean("@Model?.RecognitionDisable");
            messagingActive = GetBoolean("@Model?.MessagingActive");
            onlyRefresh = GetBoolean("@Model?.OnlyRefresh");
            culture = "@Model?.Culture";
            id = "@Model?.Id";
            hostSelected = "@Model?.HostSelected";
            phrase = "@Model?.Phrase";
            logJSActive = GetBoolean("@Model?.LogJSActive");

            if(finalStep == false) {
                if(phrase != null && phrase != ""){           

                }
            }
            else{
                stepType = "";
                step = 0;
                subType = "";
                id = 0;
            }

            listeningWord1 = ("@Model?.ListeningWord1").trim().toLowerCase();
            listeningWord2 = ("@Model?.ListeningWord2").trim().toLowerCase();

            listeningPhrase = listeningWord1;
            if(listeningPhrase != "") listeningPhrase += " ";
            listeningPhrase += listeningWord2;

            executionQueueId = "@Model?.ExecutionQueueId";
            shortcutsInJson = "@Model?.ShortcutsInJson";
            shortcutGroupsInJson = "@Model?.ShortcutGroupsInJson";

            identificationInJson = "@Model?.IdentificationInJson";
            userId = "@Model?.UserId";
            webSpeechesInJson = "@Model?.WebSpeechesInJson";

            newWebSpeechRequestName = "@Model?.NewWebSpeechRequestName";
            type = "@Model?.Type";
            parameters = "@Model?.Parameters"; 
            ehi = 0;

            try {
                ehi=parseInt("@Model?.Ehi");
            }
            catch (error) {}
            
            timeToResetInSeconds = 0;           
            try {
                timeToResetInSeconds=parseInt("@Model?.TimeToResetInSeconds");
            }
            catch (error) {}

            timeToEhiTimeoutInSeconds = 0;           
            try {
                timeToEhiTimeoutInSeconds=parseInt("@Model?.TimeToEhiTimeoutInSeconds");
            }
            catch (error) {}
            
            subType = "@Model?.SubType";
            step = -1;
            
            try {
                step=parseInt("@Model?.Step");
            }
            catch (error) {}

            //application = true; //to debug

            LogFunctionEnd();
        }
        
        function StopBoxAnimated(){
            boxAnimatedInlistening = null;
            document.getElementById("boxAnimated").innerHTML = boxAnimatedStopped;
        }

        function StartBoxAnimated(listening) {
            if (listening == true && boxAnimatedInlistening != true) {
                document.getElementById("boxAnimated").innerHTML = boxAnimatedListening;
                boxAnimatedInlistening = true;
            }

            if (listening == false && boxAnimatedInlistening != false) {
                document.getElementById("boxAnimated").innerHTML = boxAnimatedSpeech;
                boxAnimatedInlistening = false;
            }
        }

        function InitSpeech() {
            speech = new SpeechSynthesisUtterance();

            voices = window.speechSynthesis.getVoices();

            // Set the text and voice attributes.
           
            speech.volume = 1;
            speech.rate = 1;
            speech.pitch = 1;
            speech.lang = culture;

            if (culture.toLowerCase() == "it-it") speech.voice = FindInArrayOfObject(voices, "name", "Google italiano");

            if (culture.toLowerCase() == "it-it" && (speech.voice == null || speech.voice == undefined)) speech.voice = voices[14];
            if (culture.toLowerCase() == "it-it" && (speech.voice == null || speech.voice == undefined)) speech.voice = voices[4];

            if (culture.toLowerCase() == "en-us") speech.voice = FindInArrayOfObject(voices, "name", "Google UK English Female");

            if (culture.toLowerCase() == "en-us" && (speech.voice == null || speech.voice == undefined)) speech.voice = voices[7];
            if (culture.toLowerCase() == "en-us" && (speech.voice == null || speech.voice == undefined)) speech.voice = voices[2];

            synth = window.speechSynthesis;
        }

        function ReadOutLoud(_message, _finalStep) {
            LogFunctionStart();
            readOutLoudActive = true;
            recognitionActive = false;
            if(recognition != null){
                recognition.abort();
                recognition.stop();
            }

            var messageBCK = _message;

            //console.warn("[" + _message + "]");

            _message = _message.replace(/\./g, ". ");
            _message = _message.replace(/:/g, ": ");
            _message = _message.replace(/;/g, "; ");
            _message = _message.replace(/,/g, ", ");
            
            _message = _message.replace(/   /g, " ");
            _message = _message.replace(/  /g, " ");

            _message = _message.replace(/\/n/g, ", ");
            _message = _message.replace(/\/r/g, ", ");

            var message = "";
            var words = _message.split(" ");
            var countWords = words.length;
            var maxWords = 30;
            var actualWords = 0;

            actualWords = maxWords;
            _finalStep = false;

            if(_finalStep == false){
                var isActualWord = true;

                for (var i = 0; i < countWords; i++)
                {
                    if(isActualWord == true)
                    {
                        if(message != "") message += " ";
                        message += words[i];
                    } 

                    if ((i == actualWords) || (i <= actualWords && (words[i].indexOf(".") > -1 || words[i].indexOf(",") > -1 || words[i].indexOf(";") > -1 || words[i].indexOf(":") > -1)))
                        isActualWord = false;
                }  

                _message = _message.replace(message, "").trim();   

                var firstCharIndex = -1;
                var firstNumberIndex = -1;
                if(_message != null){
                    var firstCharMatch = _message.match("[a-zA-Z]");
                    if(firstCharMatch != null)firstCharIndex = firstCharMatch.index;
                    var firstNumberMatch = _message.match("[0-9]");                   
                    if(firstNumberMatch != null)firstNumberIndex = firstNumberMatch.index;
                }
                if(_message == "" || (firstCharIndex == -1 && firstNumberIndex == -1))_finalStep = true;
            }

            message = message.replace(/\./g, "");
            message = message.replace(/\,/g, "");
            message = message.replace(/\:/g, "");
            message = message.replace(/\;/g, "");

            message = "' " + message.trim();

            //console.warn("[" + message + "]");

            document.getElementById("final_span").innerHTML = message;

            StartBoxAnimated(false);

            //if (speech == undefined || speech == null)

            if (initSpeechExecuted == false) { 
                InitSpeech();
                initSpeechExecuted = true;
            }

            speech.text = message;

            var speakHasError = false;
            var _error = "";

            try {
               synth.speak(speech);
            }
            catch (error) { 
                speakHasError=true;
                _error = error;
            }

            var speakIsSuccesuful = synth.speaking;

            if(speakIsSuccesuful == false || speakHasError == true) {
                if(logJSActive) console.warn("speakIsSuccesuful:" + speakIsSuccesuful + " - speakHasError:" + speakHasError + " _error:"+_error);
                EndReadOutLoud();

                setTimeout(function () {
                    ReadOutLoud(messageBCK, _finalStep);
                }, 50);        

                return 0;
            }
            
            speech.onend = function(event) {
                LogFunctionStart("speech.onend");
                if (_finalStep == true || readOutLoudActive == false || _message == null || _message == ""){
                    EndReadOutLoud();
                    MediaPlayOrPause();
                    
                } else {
                    if(synth != null) synth.cancel();
                    ReadOutLoud(_message, _finalStep); 
                }
                LogFunctionEnd("speech.onend");
            }
            LogFunctionEnd();
        }

        function EndReadOutLoud(){
            LogFunctionStart();
            if(synth != null) synth.cancel();

            if(recognition != null && IsMobile() == false){                  
                try {
                    recognition.start();
                }
                catch (error) { } 
            }

            if (IsMobile() == false) {
                StartBoxAnimated(true);
            } else {
                StopBoxAnimated();
            }

            recognitionActive = true;
            readOutLoudActive = false;
                    
            document.getElementById("final_span").innerHTML = "";

            countTheTimesToPartialReset = 0;
            partialResetActive = false;
            countTheTimeToResetInSeconds = 0;

            if(ehi == 1 && recognitionActive == true) partialResetActive = true;  
            else if(ehi == 1 && phraseSended == true) partialResetActive = true;
            else PartialReset();

            if(recognitionDisable == true) RecognitionDisable();

            readingMessage = false;

            LogFunctionEnd();
        }

        function ExecutionFinished(){
            LogFunctionStart();
            if(url != null && application == true)
            {
                var json = "{_id:"+id+",_hostSelected:"+hostSelected+"}";
                var _url = url.replace("Recognition","ExecutionFinished")+"?_id="+executionQueueId+"&_hostSelected="+hostSelected;
                SendHttpRequest("POST", _url, json, null);
            }
            LogFunctionEnd();
        }

        function MediaPlayOrPause() {
            LogFunctionStart();
            if (url != null && application == true) {
                var json = "{_hostSelected:" + hostSelected + "}";
                var _url = url.replace("Recognition", "MediaPlayOrPause") + "?_hostSelected=" + hostSelected;
                SendHttpRequest("POST", _url, json, null);
            }
            LogFunctionEnd();
        }

        function InitPage(){
            LogFunctionStart();

            if(application == true){
                document.getElementById("menu_button").style.display = "inline";
                document.getElementById("menu_button").style.marginLeft = "400px";

                var element = document.getElementById("menu_items");
                element.classList.remove("flex-sm-row-reverse");
                element.classList.remove("d-sm-inline-flex");
                element.classList.remove("navbar-expand-sm");
                element.classList.remove("navbar-collapse");

                element = document.getElementById("navbarBrand");
                element.classList.remove("flex-sm-row-reverse");
                element.style.color = "#333";

                document.getElementById("footerContainer").style.color = "#333";
            }

            document.getElementById("mainContainer").classList.remove("container");

            document.getElementById("sendPhrase_text")
                .addEventListener("keyup", function(event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    document.getElementById("sendPhrase_button").click();
                }
            });

            if(IsMobile() == true){
                document.getElementById("div_start").style.display = "block";
            }

            hostsArrayString = hostsArrayString.replace(/&quot;/g, '"').replace(/\\/g, "");
            if(_error != null && _error != "" && logJSActive) console.warn(_error);
            try {
                hosts = JSON.parse(hostsArrayString);
            }
            catch (error) {
            }   

            if(hosts != null && hosts.length > 0 ){
                hosts_cmb_string='<select name="hosts_cmb" class="btn btn-dark" id="hosts_cmb" value="'+hostSelected+'" style="background-color:#000; color:#333;">';
                for (var i = 0; i < hosts.length; i++)
                {
                    hosts_cmb_string+='<option>'+ hosts[i]+'</option>';
                }  
                hosts_cmb_string+='</select>';
                $("#hosts_cmb_container").html(hosts_cmb_string);

                document.getElementById("hosts_cmb").value = hostSelected;
            }
            LogFunctionEnd();
        }

        function SendPhrase(){
            LogFunctionStart();
            if(_reset == false){
                _phrase = $("#sendPhrase_text").val();
                if(_phrase != null && _phrase != ""){
                    var phraseTmp = _phrase;

                    LogWithTime("Sended phrase: " + phraseTmp);

                    ehiRecognitedAudio.play();

                    var matchPhraseResult = MatchPhrase(phraseTmp, webSpeeches, identification);

                    if(matchPhraseResult.Data != null){
                        id = matchPhraseResult.Data.Id;
                        _keysMatched = matchPhraseResult.WebSpeechKeysMatched;;
                    }    
                    
                    CallWebSpeechDtoInJson(("_subType=" + subType + "&userId=" + userId  + "&userId=" + userId + "&_step=" + step + "&_recognitionDisable=" + recognitionDisable + "&_id=" + id + "&_phrase=" + phraseTmp + "&_hostSelected="+$("#hosts_cmb option:selected").text() + "&_application="+application + "&_param="+encodeURIComponent(newParameters)) + "&_keysMatched=" + _keysMatched, "ResultSendPhrase");
                }
            }
            LogFunctionEnd();
        }

        function CallWebSpeechDtoInJson(paramString, funcName){
            LogFunctionStart();
            
            var _url = url.replace("Recognition","GetWebSpeechDtoInJson")+"?" + paramString;

            PartialReset();
                    
            SendHttpRequest("GET", _url, null, funcName);
            LogFunctionEnd();
        } 

        function ResultSendPhrase(result){
            LogFunctionStart();
            VariablesAssignmentFromJson(result);
            
            phraseSended = true;
            if(finalStep == false) ehi=1;
            else ehi=0;

            Action(type, parameters);
            Speak();

            if(newWebSpeechRequestName != null && newWebSpeechRequestName != "" && newWebSpeechRequestName != "null")  CallCreateWithParam(newWebSpeechRequestName);
            if(recognitionDisable == true) RecognitionDisable();  

            LogFunctionEnd();
        }

        function CallCreateWithParam(_newWebSpeechRequestName){
            LogFunctionStart();
            var _url = url.replace("Recognition","Create")+"?_newWebSpeechRequestName="+ _newWebSpeechRequestName;

            if(application == false){
                window.open(_url);
            }
            else if(application == true){
                window.open(_url, "Create WebSpeech", "width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1");
            } 
            LogFunctionEnd();
        }

        function Upgrade() {
            LogFunctionStart();
            if(recognitionActive == true) StopBoxAnimated();
            LogFunctionEnd();
        }

        function StartButton(event) {
            LogFunctionStart();

            recognitionActive = true;

            if (IsMobile() == false) StartBoxAnimated(true);

            if (IsMobile() == true) {
                StartBoxAnimated(true);
                ehi = 1;
                document.getElementById("start_img").src = "/Images/microphone.png";
            }

            try {
                recognition.abort();
                recognition.stop();
            }
            catch (error) { }

            final_transcript = "";
            recognition.lang = culture;

            try {
                recognition.start();
            }
            catch (error) { } 

            ignore_onend = false;

            LogFunctionEnd();
        }

        function InitRecognition() {
            LogFunctionStart();
            if (!("webkitSpeechRecognition" in window)) {
                Upgrade();
            } else {
                recognition = new webkitSpeechRecognition("No warning should arise");

                if (IsMobile() == false){
                    recognition.continuous = true;
                    recognition.interimResults = true;
                }

                recognition.onstart = function () {
                    recognizing = true;
                    if(logJSActive) console.warn("info_speak_now");
                };

                recognition.onerror = function (event) {
                    if(logJSActive) console.warn("recognition.onerror: " + event.error);

                    firstLoad = true;

                    if (IsMobile() == true) {
                        document.getElementById("start_img").src = "/Images/microphone.gif";
                        StopBoxAnimated();
                    }

                    if(recognitionActive == true){
                        if(partialResetActive == false) PartialReset(true,false);
                        if (IsMobile() == false) StartButton(event);
                    }
                    if (event.error == "no-speech") {
                        if(logJSActive) console.warn("info_no_speech");
                        ignore_onend = true;
                    }
                    if (event.error == "audio-capture") {
                        if(logJSActive) console.warn("info_no_microphone");
                        ignore_onend = true;
                    }
                    if (event.error == "not-allowed") {
                        if(logJSActive) console.warn("not-allowed");
                        ignore_onend = true;
                    }
                };

                recognition.onend = function () {
                    LogFunctionStart("recognition.onend");
                    if(recognitionActive == true){
                        if(partialResetActive == false) PartialReset(true,false);
                        if (IsMobile() == false) StartButton(event);
                    }

                    if(IsMobile() == true){
                        document.getElementById("start_img").src = "/Images/microphone.gif";
                        StopBoxAnimated();
                    }
                    LogFunctionEnd("recognition.onend");
                };

                recognition.onresult = function (event) {
                    var interim_transcript = "";

                    if (typeof (event.results) == "undefined") {
                        if(recognitionActive == true) StopBoxAnimated();
                    } else {
                        for (var i = event.resultIndex; i < event.results.length; ++i) {
                            if (event.results[i].isFinal) {
                                interim_transcript += event.results[i][0].transcript;
                            } else {
                                interim_transcript += event.results[i][0].transcript;
                            }

                            document.getElementById("interim_span").innerHTML = Linebreak(interim_transcript);
                        }

                        var res = event.results[event.results.length-1];
                        var isFinal = res.isFinal;

                        Recognition(isFinal, interim_transcript);
                    }
                };
            }
            LogFunctionEnd();
        }

        function Recognition(isFinal, interim_transcript){
            if(_phrase == null){
                _phrase = interim_transcript.trim().toLowerCase();

                if ((_phrase == null || _phrase == "") && readOutLoudActive == false) {
                    if (IsMobile() == false) {
                        StartBoxAnimated(true);
                    } else {
                        StopBoxAnimated();
                    }
                }

                if (_phrase != "" && _phrase != null) {
                    StartBoxAnimated(false);

                    countTheTimesToPartialReset = 0;
                    countTheTimeToResetInSeconds = 0;
                    countTheTimeToResetInterim_spanInSeconds = 0;

                    
                    if (recognitionActive == true) {
                        if (isFinal == true){
                            LogWithTime("Recognition: " + interim_transcript);
                            document.getElementById("interim_span").innerHTML = "";
                            interim_transcript = "";

                            var listeningPhraseFound = false;

                            if (ehi == 0) {
                                var listeningPhraseFound1 = false;
                                var listeningPhraseFound2 = false;

                                var listeningPhrasePosition1 = 0;
                                var listeningPhrasePosition2 = 0;

                                var _phraseSplit = _phrase.split(" ");

                                var _phraseTemp = "";

                                for (var x = 0; x < _phraseSplit.length; x++) {
                                    
                                    if (listeningPhraseFound1 && listeningPhraseFound2) {
                                        if (_phraseTemp != "") _phraseTemp += " ";
                                        _phraseTemp += _phraseSplit[x];
                                    }

                                    if (listeningWord1 != null && listeningWord1 != "null" && listeningWord1 != undefined && listeningWord1 != "") {
                                        if (_phraseSplit[x].trim().toLowerCase() == listeningWord1.trim().toLowerCase()) { 
                                            listeningPhraseFound1 = true;
                                            listeningPhrasePosition1 = x;
                                            if (_phraseTemp != "") _phraseTemp += " ";
                                            _phraseTemp += _phraseSplit[x];
                                        }
                                    } else
                                        listeningPhraseFound1 = true;

                                    if (listeningWord2 != null && listeningWord2 != "null" && listeningWord2 != undefined && listeningWord2 != "") {
                                        if (_phraseSplit[x].trim().toLowerCase() == listeningWord2.trim().toLowerCase()) {
                                            listeningPhraseFound2 = true;
                                            listeningPhrasePosition2 = x;
                                            if (_phraseTemp != "") _phraseTemp += " ";
                                            _phraseTemp += _phraseSplit[x];
                                        }
                                    } else
                                        listeningPhraseFound2 = true;
                                }

                                _phrase = _phraseTemp;

                                listeningPhraseFound = listeningPhraseFound1 && listeningPhraseFound2;
                                if (((listeningPhrasePosition2 - listeningPhrasePosition1) > 3) || ((listeningPhrasePosition1 - listeningPhrasePosition2) > 3)) listeningPhraseFound = false;
                            }

                            if (listeningPhraseFound && ehi == 0 && _reset == false) {
                                ehiRecognitedAudio.play();
                                            
                                var phraseTmp = _phrase;

                                var matchPhraseResult = MatchPhrase(phraseTmp, webSpeeches, identification);

                                if(matchPhraseResult.Data != null){
                                    id = matchPhraseResult.Data.Id;
                                    _keysMatched = matchPhraseResult.WebSpeechKeysMatched;
                                }   

                                CallWebSpeechDtoInJson(("_subType=" + subType + "&userId=" + userId  + "&_step=" + step + "&_recognitionDisable=" + recognitionDisable + "&_id=" + id + "&_phrase=" + phraseTmp + "&_hostSelected="+$("#hosts_cmb option:selected").text() + "&_application="+application + "&_param="+encodeURIComponent(newParameters)) + "&_keysMatched=" + _keysMatched, "ResultRecognitionEhi");
                            } else if (ehi == 1 && listeningPhraseFound == false && _phrase != null && _phrase != "" && _reset == false) {
                                ehiRecognitedAudio.play();

                                var phraseTmp = _phrase;

                                var matchPhraseResult = MatchPhrase(phraseTmp, webSpeeches, identification);

                                if(matchPhraseResult.Data != null){
                                    id = matchPhraseResult.Data.Id;
                                    _keysMatched = matchPhraseResult.WebSpeechKeysMatched;
                                }   

                                CallWebSpeechDtoInJson(("_subType=" + subType + "&userId=" + userId  + "&_step=" + step + "&_recognitionDisable=" + recognitionDisable + "&_id=" + id + "&_phrase=" + phraseTmp + "&_hostSelected="+$("#hosts_cmb option:selected").text() + "&_application="+application + "&_param="+encodeURIComponent(newParameters)) + "&_keysMatched=" + _keysMatched, "ResultRecognitionPhrase");
                            } else if (ehi == 0 && _phrase != listeningPhrase && listeningPhraseFound == true && _phrase != null && _phrase != "" && _reset == false) {
                                ehiRecognitedAudio.play();

                                var phraseTmp = _phrase;
                                var start = phraseTmp.indexOf(listeningPhrase); 
                                start = start + listeningPhrase.length;
                                phraseTmp = phraseTmp.substring(start, phraseTmp.length);
                                phraseTmp = phraseTmp.trim();

                                var matchPhraseResult = MatchPhrase(phraseTmp, webSpeeches, identification);

                                if (matchPhraseResult.Data != null) {
                                    id = matchPhraseResult.Data.Id;
                                    _keysMatched = matchPhraseResult.WebSpeechKeysMatched;
                                }

                                CallWebSpeechDtoInJson(("_subType=" + subType + "&userId=" + userId  + "&_step=" + step + "&_recognitionDisable=" + recognitionDisable + "&_id=" + id + "&_phrase=" + phraseTmp + "&_hostSelected="+$("#hosts_cmb option:selected").text() + "&_application="+application + "&_param="+encodeURIComponent(newParameters)) + "&_keysMatched=" + _keysMatched, "ResultRecognitionPhrase");
                            }

                            if (readOutLoudActive == false) {
                                if (IsMobile() == false) {
                                    StartBoxAnimated(true);
                                } else {
                                    StopBoxAnimated();
                                }
                            }
                        }
                    }
                }
                _phrase = null;
            }        
        }

        function ResultRecognitionPhrase(result){  
            LogFunctionStart();
            VariablesAssignmentFromJson(result);

            if (finalStep == false) ehi = 1;
            else ehi = 0;
            
            Action(type, parameters);
            Speak();
            if(newWebSpeechRequestName != null && newWebSpeechRequestName != "" && newWebSpeechRequestName != "null")  CallCreateWithParam(newWebSpeechRequestName);
            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function ResultRecognitionEhi(result){
            LogFunctionStart();
            VariablesAssignmentFromJson(result);

            if (finalStep == false) ehi = 1;
            else ehi = 0;
            
            Action(type, parameters);
            Speak();
            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function SimulateClick(control) {
            LogFunctionStart();
            if (document.all) {
                control.click();
            } else {
                var evObj = document.createEvent("MouseEvents");
                evObj.initMouseEvent("click", true, true, window, 1, 12, 345, 7, 220, false, false, true, false, 0, null);
                control.dispatchEvent(evObj);
            }
            LogFunctionEnd();
        }

        function LogWithTime(value, isAWarning){
            if(!logJSActive && isAWarning) return "";
            var date = new Date();
            var dateString = date.toISOString().replace("T"," ").replace("Z","");
            value = dateString + " - " + value;
            if(isAWarning == true) console.warn(value);
            else console.log(value);

            consoleLog.push(value);

            return value;
        }

        function LogFunctionStart(functionName){
            if(!logJSActive) return "";
            var date = new Date();
            var dateString = date.toISOString().replace("T"," ").replace("Z","");
            var value = LogFunctionStart.caller.name;
            if(functionName != null && functionName != undefined) value =functionName;
            value = dateString + " - Function: " + value +" - START";
            console.warn(value);

            consoleWarn.push(value);

            return value;
        }

        function LogFunctionEnd(functionName){
            if(!logJSActive) return "";
            var date = new Date();
            var dateString = date.toISOString().replace("T"," ").replace("Z","");
            var value = LogFunctionEnd.caller.name;
            if(functionName != null && functionName != undefined) value =functionName;
            value = dateString + " - Function: " + value +" - END";
            console.warn(value);

            consoleWarn.push(value);

            return value;
        }

        function GetTimeRemain(difference){
            var _difference = (difference / 60);
            var _seconds = (_difference % 1) * 60;
            var _minutes = Math.floor(_difference);
            var _time = "";

            if(_minutes >= 1) _time += _minutes;
            if(_minutes < 1) _time += 0;
            if(_time != "" && _seconds != 0)_time += ":";
            if(_seconds != 0) _time += parseInt(_seconds);
            
            return _time;
        }

        function TimerManager(){
            lastIndex = -1;
            var lastIndexInString = GetCookie("SuppSiteTimerLastIndex"); 

            if(lastIndexInString != null && lastIndexInString != "")
                lastIndex = parseInt(lastIndexInString);
            else
                return 0;

            if(timers == null) timers = new Array();

            for(var i = 0; i <= lastIndex; i++) 
            {
                if(timers[i] == undefined || timers[i] == null){
                    var timerParamInJson = GetCookie("SuppSiteTimerParamInJson_" + i);
                    timerParamInJson = DecodeUnicode(timerParamInJson);

                    if(timerParamInJson != null && timerParamInJson != "" && timerParamInJson != "null") {
                        timers[i] = new Array();
                        timers[i]["Active"] = true;
                    
                        var timerParam = JSON.parse(timerParamInJson);
                        timers[i]["Index"] = parseInt(DecodeUnicodeExtended(timerParam["Index"]));
                        timers[i]["Phrase"] = DecodeUnicodeExtended(timerParam["Phrase"]);
                        timers[i]["Date"] = Date.parse(DecodeUnicodeExtended(timerParam["Date"]));
                        timers[i]["Type"] = DecodeUnicodeExtended(timerParam["Type"]);
                        timers[i]["WithEvent"] = GetBoolean(DecodeUnicodeExtended(timerParam["WithEvent"]));
                        timers[i]["Summary"] = DecodeUnicodeExtended(timerParam["Summary"]);

                        InitProgress(shortcuts, "System" + timers[i]["Type"].replace("Set","Delete"), timers[i]["Index"]);
                    }
                } else {
                    var now = new Date();
                    var difference = (-(now - timers[i]["Date"])) / 1000;
                    if(timers[i]["InitialDifference"] == undefined || timers[i]["InitialDifference"] == null){
                        timers[i]["InitialDifference"] = difference;
                        CirlceProgressBar(0, GetTimeRemain(difference), timers[i]["Index"]);
                    }

                    var percent = /*100 -*/ (difference / timers[i]["InitialDifference"] * 100);

                    CirlceProgressBar(percent, GetTimeRemain(difference), timers[i]["Index"]);
                    
                    if(timers[i]["Date"] != null && now >= timers[i]["Date"] && difference < 60){
                        MediaPlayOrPause();

                        var _answer = GetValue(timers[i]["Phrase"], culture);

                        LogWithTime("Answer: " + _answer);

                        ReadOutLoud(_answer, false);
                        DeleteProgressBar(timers[i]["Index"]);
                    }
                }
            }
        }

        function ReadTextFile(url) {
            var allText = "";
            var rawFile = new XMLHttpRequest();
            rawFile.open("GET", url, false);
            rawFile.onreadystatechange = function () {
                if (rawFile.readyState === 4) {
                    if (rawFile.status === 200 || rawFile.status == 0) {
                        allText = rawFile.responseText;
                    }
                }
            }

            rawFile.send(null);

            return allText;
        }

        async function FileExists(url) {
            var result = false;

            try {
                var response = await fetch(url);

                if (response.status == 200) {
                    result = true;
                } else if (response.status === 404) {
                    result = false;
                    if (!logJSActive) { 
                        console.clear();

                        consoleLog.forEach((element) => console.log(element));
                        consoleWarn.forEach((element) => console.warn(element));
                    }
                }
            }
            catch (error) { result = false; }

            return result;
        }

        function CallCleanMessage(_userId){
            LogFunctionStart();
            
            cleaningMessage = true;

            var _url = url.replace("Recognition","CleanMessage")+"?" + "userId=" + _userId;
                    
            SendHttpRequest("POST", _url, null, "ResultCleanMessage");

            LogFunctionEnd();
        } 

        function ResultCleanMessage(result) {
            LogFunctionStart();

            cleaningMessage = false; 

            LogFunctionEnd();
        }

        function RandomIntFromInterval(min, max) {
          return Math.floor(Math.random() * (max - min + 1) + min);
        }

        function MessageManager(){
            if (readingMessage == false && cleaningMessage == false && readOutLoudActive == false && userId > 0 && messagingActive == true) {
                (async () => {
                    var url = "/Files/Message_" + userId + ".txt";

                    try {
                        var messageExists = await FileExists(url);

                        if (messageExists == true) {
                            readingMessage = true;
                            var message = ReadTextFile(url);
                            CallCleanMessage(userId);

                            var _message = HexDecode(message);
                            _message = GetValue(_message, culture);

                            LogWithTime("Message: " + _message);

                            ReadOutLoud(_message, false);
                        }
                    }
                    catch (error) { readingMessage = false; }
                })();
            }
        }

        function Service() {
            TimerManager();

            MessageManager();

            //timeToEhiTimeoutInSeconds = 10; // to debug

            //console.log("ehi:"+ehi +" recognitionActive:"+recognitionActive + " partialResetActive:"+partialResetActive+ " countTheTimesToPartialReset:"+countTheTimesToPartialReset);

            // partial reset after ehi with wait countTheTimesToPartialReset
            if(partialResetActive && countTheTimesToPartialReset == timeToEhiTimeoutInSeconds){
                if(logJSActive) console.warn("TheTimesToPartialReset");
                countTheTimesToPartialReset = 0;
                PartialReset(false,true);
            }

            if(partialResetActive) countTheTimesToPartialReset++;
            else countTheTimesToPartialReset = 0;

            //timeToResetInSeconds = 12; //to debug
            //resetActive = true; //to debug

            //console.log("recognitionActive:"+recognitionActive + " resetActive:"+resetActive+ " shortcutsOpen:" +shortcutsOpen+ " countTheTimeToResetInSeconds:"+countTheTimeToResetInSeconds);

            // reset after idle time countTheTimeToResetInSeconds
            //if(resetActive && countTheTimeToResetInSeconds == timeToResetInSeconds && recognitionActive == true && shortcutsOpen == false){
            //    if(logJSActive) console.warn("TheTimeToResetInSeconds");
            //    countTheTimeToResetInSeconds = 0;
            //    resetActive = false;  
            //    Reset(false, true);
            //}
            //
            //if(resetActive == true && recognitionActive == true && shortcutsOpen == false) countTheTimeToResetInSeconds++;
            //else countTheTimeToResetInSeconds = 0;

            if(countTheTimeToResetInterim_spanInSeconds == 2){
                var interim_transcript = document.getElementById("interim_span").innerHTML;
                Recognition(true, interim_transcript);
            }

            if(countTheTimeToResetInterim_spanInSeconds >= 10){
                if (document.getElementById("interim_span").innerHTML != "") LogWithTime("Recognition: " + document.getElementById("interim_span").innerHTML);
                document.getElementById("interim_span").innerHTML = "";
                countTheTimeToResetInterim_spanInSeconds = 0;
            } else {
                countTheTimeToResetInterim_spanInSeconds++;
            }
        }

        function SetAudio(){
            LogFunctionStart();
            try {
                if(audioActive == true) {
                    navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(function (stream) {
                        window.localStream = stream;
                        if(logJSActive) console.warn("You let me use your mic!")
                    })
                    .catch(function (err) {
                        console.warn("No mic for you!")
                    });
                } else {
                    window.localStream.getTracks().forEach( (track) => {
                        track.stop();
                        if(logJSActive) console.warn("mic off")
                    });
                    window.localStream.getAudioTracks()[0].stop();
                }
            }
            catch (error) { }
            LogFunctionEnd();
        }

        function GetValue(value, _culture){
            var now = new Date();
            var dd = now.toLocaleDateString(_culture, {day: 'numeric'});
            var dddd = now.toLocaleDateString(_culture, {weekday: 'long'});
            var MMMM = now.toLocaleDateString(_culture, {month: 'long'});
            var MM = now.toLocaleDateString(_culture, {month: 'numeric'});
            var yyyy = now.toLocaleDateString(_culture, {year: 'numeric'});
            var HH = now.toLocaleDateString(_culture, {hour: 'numeric'}).split(" ")[1];
            var mm = now.toLocaleDateString(_culture, {minute: 'numeric'}).split(" ")[1];
            var ss = now.toLocaleDateString(_culture, {second: 'numeric'}).split(" ")[1];

            value = value.replace("SHORTDATE", dddd + ", " + dd + " " + MMMM);

            if (_culture.toLowerCase() == "it-it")
                value = value.replace("DATETIME", HH + " e " + mm + "minuti, " + dddd + ", " + dd + " " + MMMM + " " + yyyy);

            if (_culture.toLowerCase() == "en-us")
                value = value.replace("DATETIME", HH + " e " + mm + "minutes, " + dddd + ", " + dd + " " + MMMM + " " + yyyy);

            value = value.replace("DATE", dddd + ", " + dd + " " + MMMM);

            if (_culture.toLowerCase() == "it-it")
                value = value.replace("TIME", HH + " e " + mm + "minuti");

            if (_culture.toLowerCase() == "en-us")
                value = value.replace("TIME", HH + " and " + mm + "minutes");

            try {
                var _nicknamesInJson = nicknamesInJson.replace(/&quot;/g, '"').replace(/\\/g, "");

                var nicknames = JSON.parse(_nicknamesInJson);

                var rndInt = RandomIntFromInterval(0, nicknames.length - 1);

                value = value.replace("NAME", nicknames[rndInt]);

                value = value.replace("NAME", name);
            }
            catch (error) {
            }

            value = value.replace("#", "");

            value = value.replace("_", " ");
                
            return value;
        }

        function Speak(){
            LogFunctionStart();

            if (answer == null || answer == "") answer = message;

            if (answer != null && answer != "") {
                document.getElementById("final_span").innerHTML = "";
                document.getElementById("interim_span").innerHTML = "";
                var _answer = HexDecode(answer);
                _answer = GetValue(_answer, culture);
                answer = null;
                message = null;

                LogWithTime("Answer: " + _answer);
                
                ReadOutLoud(_answer, false); 
            } else if(finalStep == false && subType != null && subType != "" ){
                var phraseTmp = "";
                CallWebSpeechDtoInJson(("_subType=" + subType + "&userId=" + userId  + "&_step=" + step + "&_recognitionDisable=" + recognitionDisable + "&_id=" + id + "&_phrase=" + phraseTmp + "&_hostSelected="+$("#hosts_cmb option:selected").text() + "&_application="+application + "&_param="+encodeURIComponent(newParameters)) + "&_keysMatched=" + _keysMatched, "ResultRecognitionPhrase");
            } else {
                PartialReset();
            }
            LogFunctionEnd();
        }

        function Reset(reset, _onlyRefresh){
            LogFunctionStart();
            PartialReset();
            if(_reset == false){ 
                 _reset = true;
                clearInterval(serviceInterval);
                location.href = "@Url.Action("Recognition", "WebSpeeches")?_reset=" + reset + "&_application=" + application + "&_executionQueueId=" + executionQueueId + "&_hostSelected=" + $("#hosts_cmb option:selected").text() + "&_onlyRefresh=" + _onlyRefresh + "&_message=" + message;
            }
            LogFunctionEnd();
        }

        function PartialReset(excludeSpan, forceFinalStep){
            LogFunctionStart();
            if(finalStep == false && forceFinalStep != true) {
                if(phrase != null && phrase != ""){           

                }
            }
            else{
                stepType = "";
                step = 0;
                subType = "";
                id = 0;
            }
            type = "";
            parameters = "";
            ehi = 0;
            _phrase = null;
            audioActive = true;
            phraseSended = false;
            partialResetActive = false;
            newParameters = "";
            _keysMatched = null;
            //countTheTimesToPartialReset = 0;
            //countTheTimeToResetInSeconds = 0;
            
            if(excludeSpan != true)
            {
                $("#sendPhrase_text").val("");
                document.getElementById("final_span").innerHTML = "";
                document.getElementById("interim_span").innerHTML = "";
            }
            LogFunctionEnd();
        }

        function PartialInitFinal(){
            LogFunctionStart();
            if(firstLoad == false) fakeClickMilliseconds = 50;
            else {            
                firstLoad = false;
                fakeClickMilliseconds = 5000;
            }

            document.getElementById("final_span").innerHTML = "";
            document.getElementById("interim_span").innerHTML = "";

            clearTimeout(initFinalTimeoutStep2);
            initFinalTimeoutStep2 = null;
            clearTimeout(initFinalTimeoutStep1);
            initFinalTimeoutStep1 = null;

            sessionGuid = GenerateGuid();
            
            initFinalTimeoutStep1 = setTimeout(function(){
                LogFunctionStart("initFinalTimeoutStep1");
                SimulateClick(document.getElementById("fakeClick_button"));

                initFinalTimeoutStep2 = setTimeout(function(){
                    LogFunctionStart("initFinalTimeoutStep2");
                    Action(type, parameters);

                    SetAudio();
                
                    if(IsMobile() == false) StartButton(event);

                    Speak();

                    LogFunctionEnd("initFinalTimeoutStep2");
                }, 50);  
                LogFunctionEnd("initFinalTimeoutStep1");
            }, fakeClickMilliseconds);
            LogFunctionEnd();
        }

        function InitFinal(){
            LogFunctionStart();

            ehiRecognitedAudio = new Audio("/Files/Ehi.mp3");

            if(application == true) resetActive = true;

            clearInterval(serviceInterval);
            serviceInterval = setInterval( function() { Service(); }, 1000);
            
            PartialInitFinal();

            if (shortcutsInJson != undefined && shortcutsInJson != null && shortcutsInJson.trim().toLowerCase() != "null" && shortcutsInJson.trim() != "") {
                var _shortcutsInJson = (shortcutsInJson).replace(/&quot;/g, '"');
                shortcuts = JSON.parse(_shortcutsInJson);

                CreateShortcuts(shortcuts, "shortcutsContainer", null);
            }

            if (shortcutGroupsInJson != undefined && shortcutGroupsInJson != null && shortcutGroupsInJson.trim().toLowerCase() != "null" && shortcutGroupsInJson.trim() != "") {
                var _shortcutGroupsInJson = (shortcutGroupsInJson).replace(/&quot;/g, '"');
                shortcutGroups = JSON.parse(_shortcutGroupsInJson);

                CreateShortcutGroups(shortcutGroups);
            }

            if(identificationInJson != undefined && identificationInJson != null && identificationInJson.trim().toLowerCase() != "null" && identificationInJson.trim() != "")
            {
                identificationInJson = (identificationInJson).replace(/&quot;/g, '"');
                identification = JSON.parse(identificationInJson);
            }

            if(webSpeechesInJson != undefined && webSpeechesInJson != null && webSpeechesInJson.trim().toLowerCase() != "null" && webSpeechesInJson.trim() != "")
            {
                var _webSpeechesInJson = (webSpeechesInJson).replace(/&quot;/g, '"');
                webSpeeches = JSON.parse(_webSpeechesInJson);
            }

            LogFunctionEnd();
        }

        function FakeClick(){
            LogWithTime("FakeClick", true);     
        }

        function RecognitionEnable(excludeSpan, forceFinalStep){  
            LogFunctionStart();
            PartialReset(excludeSpan, forceFinalStep);
            recognitionActive = true;
            recognitionDisable = false;
            audioActive = true;
            PartialInitFinal();
            document.getElementById("recognitionEnableDisable_image").src = "/Images/micOn.png";
            LogFunctionEnd();
        }

        function RecognitionEnableDisable(){
            LogFunctionStart();
            ehiRecognitedAudio.play();
            if(recognitionActive == true){
                PartialReset();
                RecognitionDisable();
            } else {
                RecognitionEnable(false, true);
                if (IsMobile() == false) {
                    StartBoxAnimated(true);
                } else {
                    StopBoxAnimated();
                }
            }
            LogFunctionEnd();
        }

        function RecognitionDisable(){
            LogFunctionStart();
            recognitionDisable = true;
            recognitionActive = false;
            audioActive = false;
            SetAudio();
            recognition.abort();
            recognition.stop();
            StopBoxAnimated();
            document.getElementById("recognitionEnableDisable_image").src = "/Images/micOff.png";
            LogFunctionEnd();
        }

        function MenuClick() {
            LogFunctionStart();
            if(application == true){
                var element = document.getElementById("menu_items");
                if(element.style.display != "inline") element.style.display = "inline";
                else element.style.display = "none";
            }
            LogFunctionEnd();
        }

        function ActionProgress(id, _index){
            LogFunctionStart();
            newParameters = timers[_index]["Summary"];
            if(timers[_index]["WithEvent"] == true) ActionShortcut(id);
            LogFunctionEnd();
        }

        function Action(type, param) {
            LogFunctionStart();

            if (application == false && type == "Link" && param != null && param != "") {
                param = DecodeUnicode(param);
                var _url = param.replace(/&amp;/g, "&");
                _url = DecodeUnicodeExtended(_url);

                window.open(_url);
            }

            else if (application == true && type == "Link" && param != null && param != "") {
                param = DecodeUnicode(param);
                var _url = param.replace(/&amp;/g, "&");
                _url = DecodeUnicodeExtended(_url);

                window.open(_url, "open param", "width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1");
            }

            else if (application == false && (type == "SystemWebSearch" || type == "WebSearch") && param != null && param != "") {
                param = DecodeUnicode(param);
                var _url = param.replace(/&amp;/g, "&");
                _url = DecodeUnicodeExtended(_url);

                window.open(_url);
            }

            else if (application == true && (type == "SystemWebSearch" || type == "WebSearch") && param != null && param != "") {
                param = DecodeUnicode(param);
                var _url = param.replace(/&amp;/g, "&");
                _url = DecodeUnicodeExtended(_url);

                window.open(_url, "search", "width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1");
            }

            else if ((type == "SystemSetTimer" || type == "Timer")) {

            }

            LogFunctionEnd();
        }

        function OpenShortcuts() {
            LogFunctionStart();
            shortcutsOpen = true;
            countTheTimeToResetInSeconds = 0;
            var element = document.getElementById("div_shortcuts");
            element.style.display = "block";
            LogFunctionStart();
        }

        function CloseShortcuts() {
            LogFunctionStart();

            CloseShortcutsGroup();

            var element = document.getElementById("div_shortcuts");
            element.style.display = "none";
            shortcutsOpen = false;
            LogFunctionEnd();
        }

        function CloseShortcutsGroup() {
            LogFunctionStart();

            var shortcutsGroupContainer = document.getElementById("shortcutsGroupContainer");
            shortcutsGroupContainer.style.visibility = "hidden";
            shortcutsGroupContainer.style.height = "1px";

            var shortcutsContainer = document.getElementById("shortcutsContainer");
            shortcutsContainer.style.visibility = "visible";
            shortcutsContainer.style.height = "auto";

            document.getElementById("shortcutGroup_0").style.visibility = "hidden";

            LogFunctionEnd();
        }

        function OpenShortcutsGroup() {
            LogFunctionStart();

            var shortcutsGroupContainer = document.getElementById("shortcutsGroupContainer");
            shortcutsGroupContainer.style.visibility = "visible";
            shortcutsGroupContainer.style.height = "auto";

            var shortcutsContainer = document.getElementById("shortcutsContainer");
            shortcutsContainer.style.visibility = "hidden";
            shortcutsContainer.style.height = "1px";

            document.getElementById("shortcutGroup_0").style.visibility = "visible";

            LogFunctionEnd();
        }

        function ActionShortcut(id){
            LogFunctionStart();
            clearTimeout(actionShortcutTimeout);       
            actionShortcutTimeout = null;

            ehiRecognitedAudio.play();

            if(shortcuts != undefined && shortcuts != null && shortcuts != "" )

            for (var i = 0; i < shortcuts.length; ++i) {
                var shortcut = shortcuts[i];

                if (shortcut["Id"] == parseInt(id)) {

                    LogWithTime("Selected shortcut: " + shortcut["Title"]);

                    if (application == false && shortcut["Type"] == "Link") {
                        var _url = shortcut["Action"].replace(/&amp;/g,"&");
                        _url = DecodeUnicodeExtended(_url);

                        window.open(_url);
                    }
                    else if (application == true && shortcut["Type"] == "Link") {
                        var _url = shortcut["Action"].replace(/&amp;/g,"&");
                        _url = DecodeUnicodeExtended(_url);

                        window.open(_url, "open link", "width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1");
                    }
                    else {
                        CallWebSpeechDtoInJson(("_subType=" + subType + "&userId=" + userId  + "&_step=" + step + "&_recognitionDisable=" + recognitionDisable + "&_id=" + shortcut["Id"] + "&_hostSelected=" + $("#hosts_cmb option:selected").text() + "&_application=" + application + "&_param=" + encodeURIComponent(newParameters)) + "&_keysMatched=" + _keysMatched, "ResultActionShortcut");
                    }
                }
            }     
            
            actionShortcutTimeout = setTimeout(function () { 
                CloseShortcuts();               
            }, 50); 

            LogFunctionEnd();
        }

        function ResultActionShortcut(result){
            LogFunctionStart();
            VariablesAssignmentFromJson(result);

            if(finalStep == false) ehi=1;
            else ehi=0;
            
            Action(type, parameters);
            Speak();
            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function AddShortcuts(shortcut, containerName){
            LogFunctionStart();
            var element = document.getElementById(containerName);
            var dt = "";

            if(shortcut["Ico"] == null || shortcut["Ico"] == "") shortcut["Ico"] = "/Images/Shortcuts/generic.png";

            dt += '<dt class="col-sm-3" style="">';
            dt += '<div>';
            dt += '<img class="btn shortcut-dark" id="shortcut_'+shortcut["Id"]+'" src="'+shortcut["Ico"]+'" alt="'+shortcut["Title"]+'" style="width:50%; margin:5%; box-shadow: rgba(250, 250, 250, 0.20) 0px 0rem 1rem !important;" onclick="ActionShortcut(' + "" + shortcut["Id"] + "" +');">';

            dt += '</div>';
            dt += '<div style="font-size:18px;">'+shortcut["Title"]+'</div>';
            dt += '</dt>';

            element.innerHTML += dt;
            LogFunctionEnd();
        }

        function ActionShortcutGroup(name) {
            LogFunctionStart();

            CreateShortcuts(shortcuts, "shortcutsGroupContainer", name);

            OpenShortcutsGroup();

            LogFunctionEnd();
        }

        function AddShortcutGroup(shortcutGroup) {
            LogFunctionStart();
            var element = document.getElementById("shortcutsContainer");
            var dt = "";

            if (shortcutGroup["Ico"] == null || shortcutGroup["Ico"] == "") shortcutGroup["Ico"] = "/Images/shortcuts/generic.png";

            dt += '<dt class="col-sm-3" style="">';
            dt += '<div>';
            dt += '<img class="btn shortcut-dark" id="shortcutGroup_' + shortcutGroup["Id"] + '" src="' + shortcutGroup["Ico"] + '" alt="' + shortcutGroup["GroupName"].trim() + '" style="width:50%; margin:5%; box-shadow: rgba(250, 250, 250, 0.20) 0px 0rem 1rem !important;" onclick="ActionShortcutGroup(' + "'" + shortcutGroup["GroupName"].trim() + "'" + ');">';

            dt += '</div>';
            dt += '<div style="font-size:18px;">' + shortcutGroup["GroupName"].trim() + " &#9783;&#10136;" + '</div>';
            dt += '</dt>';

            element.innerHTML += dt;
            LogFunctionEnd();
        }

        function CreateShortcutGroups(_shortcuts) {
            LogFunctionStart();
            var element = document.getElementById("shortcutsContainer");

            for (var i = 0; i < _shortcuts.length; ++i) {
                var shortcut = _shortcuts[i];

                if(shortcut["Type"].includes("System") == false){

                    if (shortcut.GroupName != undefined && shortcut.GroupName != null && shortcut.GroupName != 'null' && shortcut.GroupName != "" && shortcut.GroupName != " ") {
                        shortcut.GroupName = shortcut.GroupName.trim();
                        AddShortcutGroup(shortcut);
                    }
                }
            }

            element.style.maxHeight = (65 * window.innerHeight / 100) + "px";

            LogFunctionEnd();
        }

        function CreateShortcuts(_shortcuts, containerName, groupName) {
            LogFunctionStart();
            var element = document.getElementById(containerName);
            element.innerHTML = "";

            if (groupName == undefined || groupName == null || groupName == 'null') groupName = "";
            
            groupName = groupName.trim();

            for (var i = 0; i < _shortcuts.length; ++i) {
                var shortcut = _shortcuts[i];

                if (shortcut["Type"].includes("System") == false) {
                    if (shortcut.GroupName == undefined || shortcut.GroupName == null || shortcut.GroupName == 'null' || shortcut.GroupName == "" || shortcut.GroupName == " ") shortcut.GroupName = "";

                    shortcut.GroupName = shortcut.GroupName.trim();

                    if (((shortcut.GroupName == "" || shortcut.HotShortcut == true) && groupName == "") || (groupName != "" && shortcut.GroupName == groupName)) {
                        AddShortcuts(shortcut, containerName);
                    }
                }
            }

            element.style.maxHeight = (65 * window.innerHeight / 100) + "px";

            LogFunctionEnd();
        }

        function InitProgress(_shortcuts, _type, _index){
            LogFunctionStart();
            var shortcut = GetShortcut(_shortcuts, _type);
            var element = document.getElementById("progress_container");
            var dt = "";

            dt += '<div class="progress" data-percentage="0" id="progress_'+_index+'" style="position: absolute; margin-top:10px; width: 90px; height: 90px;">';
            dt += ' <span class="progress-left">';
	        dt += '     <span class="progress-bar"></span>';
            dt += ' </span>';
            dt += ' <span class="progress-right">';
	        dt += '     <span class="progress-bar"></span>';
            dt += ' </span>';
            dt += ' <div class="progress-value">';
	        dt += '     <div id="progress_value_'+_index+'" style="font-size:20px;">';
		    dt += '         0';
	        dt += '     </div>';
            dt += ' </div>';
            dt += '</div>';
            dt += '<div id="progress_delete_'+_index+'" style="margin-top:80px; margin-left:65px;">';
            dt += ' <img class="btn shortcut-dark" id="shortcut_'+shortcut["Id"]+'" src="'+"/Images/Shortcuts/close.png"+'" alt="'+shortcut["Title"]+'" style="width:50px;" onclick="ActionProgress(' + "" + shortcut["Id"] + "," + _index + "" +'); DeleteProgressBar('+ "" + _index + "" +'); ">';
            dt += '</div>';

            element.innerHTML += dt;
            LogFunctionEnd();
        }

        function GetShortcut(_shortcuts, _type){
            LogFunctionStart();
            var shortcut = null;
            for (var i = 0; i < _shortcuts.length; ++i) { 
                
                if(_shortcuts[i]["Type"] == _type)
                    shortcut = _shortcuts[i];
            }
            LogFunctionEnd();
            return shortcut;
        }

        function BoxAnimatedClick() {
           LogFunctionStart();
           ehiRecognitedAudio.play();
	       if(readOutLoudActive == false) OpenShortcuts();
           if(readOutLoudActive == true){
                readOutLoudActive = false;
                //if(synth != null) synth.cancel();
                EndReadOutLoud();
            }
            LogFunctionEnd();
	    }

        function SendPhraseTextKeyDown() {
            LogFunctionStart();
            countTheTimeToResetInSeconds = 0;
            countTheTimesToPartialReset = 0;
            LogFunctionEnd();
        }

        function CheckPopUpBlock() {
            LogFunctionStart();
            var popupblock = false;
            var test = window.open("","","width=1,height=1");
            if (!test) popupblock = true; else test.close();
            if (popupblock) alert("The pop-up blocker is ON!");
            LogFunctionEnd();
        }

        function CirlceProgressBar(percent, value, index){
            $("#progress_"+index).attr("data-percentage", parseInt(percent).toString());
            document.getElementById("progress_value_"+index).innerHTML = value; 
        }

        function DeleteProgressBar(index){
            LogFunctionStart();
            timers[index] = null;

            ehiRecognitedAudio.play();

            DeleteCookie("SuppSiteTimerParamInJson_"+index);

            var allTimersFinished = true;

            for(var i = 0; i <= lastIndex; i++) 
            {
                var timerParamInJson = GetCookie("SuppSiteTimerParamInJson_" + i);
                if(timerParamInJson != null && timerParamInJson != "")
                    allTimersFinished = false;
            }

            if(allTimersFinished == true){
                DeleteCookie("SuppSiteTimerLastIndex");
                LogWithTime("DeleteCookie: SuppSiteTimerLastIndex");
            }

            var element = document.getElementById("progress_"+index);
            element.parentNode.removeChild(element);

            element = document.getElementById("progress_delete_"+index);
            element.parentNode.removeChild(element);
            LogFunctionEnd();
        }

        window.onload = function (e) {
                VariablesAssignmentFromModel();
                if (logJSActive) console.warn("resetAfterLoad:" + resetAfterLoad);

                if (resetAfterLoad == true) {
                    clearTimeout(initFinalTimeoutStep2);
                    initFinalTimeoutStep2 = null;
                    clearTimeout(initFinalTimeoutStep1);
                    initFinalTimeoutStep1 = null;
                    if (synth != null) synth.cancel();
                    answer = null;
                    synth = null;
                    speech = null;
                    voices = null;
                    CheckPopUpBlock();
                    Reset(false, onlyRefresh);
                } else {
                    InitPage();
                    InitRecognition();
                    InitFinal();
                    InitSpeech();
                    ClearUrl();
                }

                if (recognitionDisable == true) RecognitionDisable();
        }
    </script>
}

<div id="main" style="overflow:hidden;">
    <div id="progress_container" style="position: absolute; margin-top:50px; z-index:900; margin-left:5%;"></div>
    <div style="text-align:center;">
        <div id="div_shortcuts" style="top: 100px; display: none; z-index: 999; width: 70%; max-width:1000px; position: absolute; background-color: rgba(1, 1, 1, 0.95); left: 0; right: 0; margin:auto; box-shadow: 0 0rem 1rem rgba(150, 150, 150, 0.09) !important; border-radius: 25px;">
            <div style="background-color: rgba(1, 1, 1, 0.95);  text-align:right; box-shadow: rgba(150, 150, 150, 0.09) 0 7px 6px -2px; border-radius: 25px;">
                <div style="z-index:9997; display:inline-block; left:5px; margin:5px; position:absolute;">
                    <a style="z-index:9997; color:#333; font-size:35px; ">Shortcuts</a>
                </div>
                <div class="btn shortcut-dark" style="z-index:9998;  display:inline-block; height:80px; width:140px;margin:5px; ">
                </div>
                <div style="z-index:9998; display:inline-block; margin:5px; ">
                    <img class="btn shortcut-dark" id="shortcutGroup_0" src="/Images/Shortcuts/return.png" alt="Go back" style="z-index:9998; height:80px;  visibility:hidden;" onclick="CloseShortcutsGroup();">
                </div>
                <div style="z-index:9999; display:inline-block;  margin:5px;">
                    <img class="btn shortcut-dark" id="shortcut_0" src="/Images/Shortcuts/close.png" alt="Close" style="z-index:9999; height:80px; " onclick="ActionShortcut(0);">
                </div>
            </div>
            <dl id="shortcutsContainer" class="row" style="max-height:600px; overflow-y:auto; " >
            </dl>
            <dl id="shortcutsGroupContainer" class="row" style="max-height:600px; height:1px; overflow-y:auto; visibility:hidden;">
            </dl>
        </div>
        <div id="div_boxAnimated" style="margin-top:5%;" onclick="BoxAnimatedClick();">
            <div id="boxAnimated" style="width: 100%; overflow:hidden;" onclick="BoxAnimatedClick();"></div>
        </div>
        <div style="text-align:center; bottom:100px; z-index:888; position:absolute; width:100%;">
        <div id="hosts_cmb_container" style="text-align:center; "></div>
        <div id="div_text" style="text-align:center; width:100%; margin-top:2px;">
            <button id="recognitionEnableDisable_button" onclick="RecognitionEnableDisable()"  class="btn btn-dark" style="width:57px; border-width:1px; display: inline-block; outline: 0; box-shadow: none!important; height:38px; margin-top:-1px; margin-right:0px;">
                <img id="recognitionEnableDisable_image" src="/Images/micOn.png" alt="Microphone" style="height:34px; opacity:0.2; margin-top:-5px;">
            </button>
            <input type="text" id="sendPhrase_text" value="" style="height:38px; width:50%; display:inline-block;" onkeydown="SendPhraseTextKeyDown();" class="btn btn-dark"/>
            <button id="sendPhrase_button" onclick="SendPhrase()" class="btn btn-dark" style="width:57px; display:inline-block; color:#333; border-width:1px; outline: 0;box-shadow: none!important; height:38px; margin-top:-1px;">Send</button>
            <button id="fakeClick_button" onclick="FakeClick();" style="display:none; "></button>
        </div>
        <div id="results" style="text-align:center; overflow:auto; height:25px;">
            <span class="final" id="final_span"></span> 
            <span class="interim" id="interim_span" style=""></span>
        </div>
        <div id="div_start" style="display: none;">
	        <button id="start_button" onclick="StartButton(event);" style="border-width:1px; display: inline-block; outline: 0; box-shadow: none!important; height:100px; margin-top:50px; margin-right:0px;" class="btn btn-dark">
		        <img alt="Start" id="start_img" src="/Images/microphone.gif" style="height:100%; margin:-5px;">
	        </button>
        </div>
        </div>
    </div>
</div>